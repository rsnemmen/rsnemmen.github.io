<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://rsnemmen.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://rsnemmen.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-03T01:27:55+00:00</updated><id>https://rsnemmen.github.io/feed.xml</id><title type="html">Rodrigo Nemmen’s website</title><subtitle>Rodrigo Nemmen&apos;s Data Science and Machine Learning Portfolio. </subtitle><entry><title type="html">Fuzzy file operations with fuzzycp</title><link href="https://rsnemmen.github.io/blog/2025/fuzzy_file_operations/" rel="alternate" type="text/html" title="Fuzzy file operations with fuzzycp"/><published>2025-07-02T23:00:00+00:00</published><updated>2025-07-02T23:00:00+00:00</updated><id>https://rsnemmen.github.io/blog/2025/fuzzy_file_operations</id><content type="html" xml:base="https://rsnemmen.github.io/blog/2025/fuzzy_file_operations/"><![CDATA[<p>I just created a new program that performs file operations with fuzzy filename matching: <a href="https://github.com/rsnemmen/fuzzy_cp">fuzzycp</a>. In order to understand what that means, here is a concrete example.</p> <p>Suppose you have a file <code class="language-plaintext highlighter-rouge">names.txt</code> containing a list of names you want to match against. Let’s say the content of this file is:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. The Legend of Zelda: Ocarina of Time
2. Super Mario 64
3. Mario Kart 64
4. GoldenEye 007
5. Super Smash Bros.
</code></pre></div></div> <p>This is a random example—the top five games released for the Nintendo 64 console. Now, you have a directory with thousands of files, and you want to copy to another directory only the files that are the best-match to the names in the above list. Here are some examples of files in that directory:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'Spider-Man (U) [!].v64'
'StarCraft 64 (U) [!].v64'
'Starfox 64 1.1 (U).v64'  
'Starshot - Space Circus Fever (U) [!].z64'
'Star Wars - Rogue Squadron (U) [!].v64'
'Star Wars - Shadows of the Empire (U) (V1.2) [!].v64'
'Star Wars Episode I - Battle for Naboo (U) [!].v64'
'Star Wars Episode I - Racer (U) [!].v64'
'Stunt Racer 64 (U) [!].z64'
'Super Bowling 64 (U) [!].z64'
'Supercross 2000 (U) [!].z64'
'Superman (U) (M3) [!].z64'
'Super Mario 64 (U) [!].v64'
</code></pre></div></div> <p>For the sake of our example, the content of these files is meaningless (let’s say they have the metadata for those games). Notice that there will be no exact match between the names in <code class="language-plaintext highlighter-rouge">names.txt</code> and the actual filenames. They could have different casing, missing text, extra letters etc. This is where the power of fuzzy matching shines: you don’t need an exact match.</p> <h2 id="how-fuzzycp-solves-this-problem">How fuzzycp solves this problem</h2> <p>Normally people would do this sort of thing by manually selecting file by file and copying them. Not anymore. Here is how you solve this using <code class="language-plaintext highlighter-rouge">fuzzycp</code>, doing in a few seconds what would take potentially hours:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fuzzycp names.txt -c dest/directory
</code></pre></div></div> <p>After asking for the user’s confirmation and showing a list of the bestCopy only the best-matching files to directory <code class="language-plaintext highlighter-rouge">dest/directory</code>:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/fuzzycp-480.webp 480w,/assets/img/fuzzycp-800.webp 800w,/assets/img/fuzzycp-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/fuzzycp.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Internally, fuzzycp compares the names using the <code class="language-plaintext highlighter-rouge">QRatio</code>(Quick Ratio) scorer, which uses a simple Levenshtein-based percentage after basic lowercase/whitespace cleaning. This is the fastest scorer in RapidFuzz, useful for quick filters or typo-level comparisons. More sophisticated scorer can easily be implemented.</p> <h2 id="get-fuzzycp-today">Get fuzzycp today!</h2> <p>fuzzycp is <a href="https://github.com/rsnemmen/fuzzy_cp">available on Github</a>.</p>]]></content><author><name></name></author><category term="software"/><category term="projects"/><category term="software"/><summary type="html"><![CDATA[I just created a new program that performs file operations with fuzzy filename matching: fuzzycp. In order to understand what that means, here is a concrete example.]]></summary></entry><entry><title type="html">Model deployment with FastAPI and Docker</title><link href="https://rsnemmen.github.io/blog/2025/deploy/" rel="alternate" type="text/html" title="Model deployment with FastAPI and Docker"/><published>2025-05-01T22:00:00+00:00</published><updated>2025-05-01T22:00:00+00:00</updated><id>https://rsnemmen.github.io/blog/2025/deploy</id><content type="html" xml:base="https://rsnemmen.github.io/blog/2025/deploy/"><![CDATA[<p>The ability to operationalize a machine-learning model is just as important as the model itself. In <a href="https://rsnemmen.github.io/projects/2_deploy/">this project</a> I demonstrate how a trained XGBoost classifier is (1) served via an API with FastAPI and (2) containerized with Docker and (3) deployed to Google Cloud Platform (Cloud Run).</p>]]></content><author><name></name></author><category term="data-science"/><category term="data-science"/><category term="projects"/><summary type="html"><![CDATA[The ability to operationalize a machine-learning model is just as important as the model itself. In this project I demonstrate how a trained XGBoost classifier is (1) served via an API with FastAPI and (2) containerized with Docker and (3) deployed to Google Cloud Platform (Cloud Run).]]></summary></entry></feed>